# Load necessary libraries
library(tidyverse)
library(lubridate)
library(ggplot2)
library(dplyr)
library(tidyr)
#or install if required
#install.packages("tidyverse")
#install.packages("lubridate")
# Import data
q1_2019 <- read_csv("Dataset/Divvy_Trips_2019_Q1.csv")
q1_2020 <- read_csv("Dataset/Divvy_Trips_2020_Q1.csv")
# Finding Column Names in both datasets
colnames(q1_2019)
colnames(q1_2020)
q1_2019 <- rename(q1_2019,ride_id=trip_id,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype)
str(q1_2019)  # Checking the Type of Data
str(q1_2020)
q1_2019 <- mutate(q1_2019, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
combined_data <- bind_rows(q1_2019,q1_2020) # Merging Datasets
colnames(combined_data)
combined_data <- combined_data %>% select (-c("start_lat","start_lng","end_lat","end_lng","gender","birthyear","tripduration")) # Dropping Unnecessary Data Columns
colnames(combined_data)
dim(combined_data) # Checking Dimensions of the Dataset
head(combined_data)  # Preview of Data
combined_data <- na.omit(combined_data)  # dropping null values by rows
dim(combined_data)
head(combined_data)
summary(combined_data)
table(combined_data$member_casual)
combined_data <- combined_data %>% mutate(member_casual= recode(member_casual,"Subscriber" = "member","Customer"="casual"))
table(combined_data$member_casual)
combined_data <- combined_data[!(combined_data$start_station_name == "HQ QR" | combined_data$ride_sec < 0), ]
dim(combined_data)  # Final Datapoints
print(paste("Average of ride (Sec): ",mean(combined_data$ride_sec)))
print(paste("Meadian of ride (Sec): ", median(combined_data$ride_sec)))
print(paste("Longest ride (Sec): ", max(combined_data$ride_sec)))
print(paste("Shortest ride (Sec): ", min(combined_data$ride_sec)))
summary(combined_data$ride_sec)
aggregate(combined_data$ride_sec ~ combined_data$member_casual, FUN = mean)
aggregate(combined_data$ride_sec ~ combined_data$member_casual, FUN = median)
aggregate(combined_data$ride_sec ~ combined_data$member_casual, FUN = max)
aggregate(combined_data$ride_sec ~ combined_data$member_casual, FUN = min)
# average ride time by each day for members vs casual users
aggregate(combined_data$ride_sec ~ combined_data$member_casual + combined_data$week_day,
FUN =mean)
combined_data %>% group_by(member_casual,week_day) %>% summarise(number_of_rides=n(),average_duration=mean(ride_sec)) %>% arrange(member_casual,week_day)
# Let's visualize the number of rides by rider type
combined_data %>% group_by(member_casual,week_day) %>% summarise(number_of_rides=n(),average_duration=mean(ride_sec),.groups = "keep") %>% arrange(member_casual,week_day) %>% ggplot(aes(x=week_day,y=number_of_rides,fill=member_casual))+geom_col(position = "dodge")
# Let's create a visualization for average duration
combined_data %>% group_by(member_casual,week_day) %>% summarise(number_of_rides=n(),average_duration=mean(ride_sec),.groups = "keep") %>% arrange(member_casual,week_day) %>% ggplot(aes(x=week_day,y=average_duration,fill=member_casual))+geom_col(position = "dodge")
combined_data %>% group_by(member_casual,week_day) %>% summarise(number_of_rides=n(),average_duration=mean(ride_sec),.groups="keep") %>% arrange(member_casual,week_day)
